#!/usr/bin/python

#
# Implements 8-connectivity connected component labeling
# 
# Algorithm obtained from "Optimizing Two-Pass Connected-Component Labeling 
# by Kesheng Wu, Ekow Otoo, and Kenji Suzuki
#

from PIL import Image, ImageDraw

import sys
import math, random
from itertools import product
from ufarray import *
import cv2
import numpy as np
import os


def run(dirs, img):
    data = img.load()
    width, height = img.size
    
    # Union find data structure
    uf = UFarray()
 
    #
    # First pass
    #
 
    # Dictionary of point:label pairs
    labels = {}
 
    for y, x in product(range(height), range(width)):
 
        #
        # Pixel names were chosen as shown:
        #
        #   -------------
        #   | a | b | c |
        #   -------------
        #   | d | e |   |
        #   -------------
        #   |   |   |   |
        #   -------------
        #
        # The current pixel is e
        # a, b, c, and d are its neighbors of interest
        #
        # 255 is white, 0 is black
        # White pixels part of the background, so they are ignored
        # If a pixel lies outside the bounds of the image, it default to white
        #
 
        # If the current pixel is white, it's obviously not a component...
        if data[x, y] == 255:
            pass
 
        # If pixel b is in the image and black:
        #    a, d, and c are its neighbors, so they are all part of the same component
        #    Therefore, there is no reason to check their labels
        #    so simply assign b's label to e
        elif y > 0 and data[x, y-1] == 0:
            labels[x, y] = labels[(x, y-1)]
 
        # If pixel c is in the image and black:
        #    b is its neighbor, but a and d are not
        #    Therefore, we must check a and d's labels
        elif x+1 < width and y > 0 and data[x+1, y-1] == 0:
 
            c = labels[(x+1, y-1)]
            labels[x, y] = c
 
            # If pixel a is in the image and black:
            #    Then a and c are connected through e
            #    Therefore, we must union their sets
            if x > 0 and data[x-1, y-1] == 0:
                a = labels[(x-1, y-1)]
                uf.union(c, a)
 
            # If pixel d is in the image and black:
            #    Then d and c are connected through e
            #    Therefore we must union their sets
            elif x > 0 and data[x-1, y] == 0:
                d = labels[(x-1, y)]
                uf.union(c, d)
 
        # If pixel a is in the image and black:
        #    We already know b and c are white
        #    d is a's neighbor, so they already have the same label
        #    So simply assign a's label to e
        elif x > 0 and y > 0 and data[x-1, y-1] == 0:
            labels[x, y] = labels[(x-1, y-1)]
 
        # If pixel d is in the image and black
        #    We already know a, b, and c are white
        #    so simpy assign d's label to e
        elif x > 0 and data[x-1, y] == 0:
            labels[x, y] = labels[(x-1, y)]
 
        # All the neighboring pixels are white,
        # Therefore the current pixel is a new component
        else: 
            labels[x, y] = uf.makeLabel()
 
    #
    # Second pass
    #
 
    uf.flatten()
 
    colors = {}

    # Image to display the components in a nice, colorful way
    
    output_img = Image.new("RGB", (100, 100))
        
    Zero=np.zeros(shape=(100, 100),dtype=np.uint8)
    One=np.zeros(shape=(100, 100),dtype=np.uint8)
    Two=np.zeros(shape=(100, 100),dtype=np.uint8)
    Three=np.zeros(shape=(100, 100),dtype=np.uint8)
    Four=np.zeros(shape=(100, 100),dtype=np.uint8)
    Five=np.zeros(shape=(100, 100),dtype=np.uint8)
    Six=np.zeros(shape=(100, 100),dtype=np.uint8)
    Seven=np.zeros(shape=(100, 100),dtype=np.uint8)
   
    count=0
    count1=0
    count2=0
    count3=0
    count7=0
    for (x, y) in labels:
        #print str(x) + " " + str(y)
        # Name of the component the current point belongs to
        component = uf.find(labels[(x, y)])
        labels[(x, y)] = component
        path='C:/Python27/cclabel/Images-2/'
        #print str(x) +","+ str(y)+ " " +str(labels[(x, y)])
        if labels[(x, y)]==0:
            Zero[y][x]=int(255)
            count=count+1
            if count==5:
                continue
            elif count>5:
                Zeroth = Image.fromarray(Zero)
                Zeroth.save(os.path.join(dirs, 'Zero.png'), 'png')
            
            #print str(Zero[x][y])
        if labels[(x, y)]==1:
            One[y][x]=int(255)
            count1=count1+1
            if count1==5:
                continue
            elif count1>5:
                First = Image.fromarray(One)
                First.save(os.path.join(dirs, 'First.png'),'png')
        if labels[(x, y)]==2:
            Two[y][x]=int(255)
            count2=count2+1
            if count2==5:
                continue
            elif count2>5:
                Second=Image.fromarray(Two)
                Second.save(os.path.join(dirs, 'Second.png'),'png')
            #print str(Three[x][y])
        if labels[(x, y)]==3:
            Three[y][x]=int(255)
            Third=Image.fromarray(Three)
            Third.save(os.path.join(dirs, 'Three.png'),'png')
                            #print str(Three[x][y])
        if labels[(x, y)]==4:
            Four[y][x]=int(255)
            Fourth=Image.fromarray(Four)
            Fourth.save(os.path.join(dirs, 'Four.png'),'png')
        if labels[(x, y)]==5:
            Five[y][x]=int(255)
            Fifth=Image.fromarray(Five)
            Fifth.save(os.path.join(dirs, 'Five.png'),'png')
        if labels[(x, y)]==6:
            Six[y][x]=int(255)
            Sixth=Image.fromarray(Six)
            Sixth.save(os.path.join(dirs, 'Six.png'),'png')
        if labels[(x, y)]==7:
            Seven[y][x]=int(255)
            count7=count7+1
            if count7==5:
                continue
            elif count7>5:
                Seventh=Image.fromarray(Seven)
                Seventh.save(os.path.join(dirs, 'Seven.png'),'png')
            
    return (labels, output_img)

 
def main():
    # Open the image
    path="C:/Python27/cclabel/Images-2/"
    for root, dirs, files in os.walk(path):
        for file_ in files:
            img = Image.open(os.path.join(root, file_))
            #print img
            #print (os.path.join(root, file_))
            img = img.point(lambda p: p > 190 and 255)
            img = img.convert('1')
            (labels, output_img) = run(root, img)

if __name__ == "__main__": main()
